 1.

    for(int i =0;i<a.length;i++){
                if(mp.containsKey(a[i])){
                     mp.put(a[i],mp.get(a[i])+1);
                }
                else{
                    mp.put(a[i], i);
                }

            }



2.
  for(int x: A)
        mp.put(x, mp.getOrDefault(x,0)+1);

3.
   find the hashmap

   for(int k: A.keySet())



4.

        for (int i = 1; i < paddingArray.length; i++)
            for (int j = 1; j < paddingArray[0].length; j++)
            {
                paddingArray[i][j] = A[i-1][j-1];
                System.out.println("arr[" + i + "][" + j + "] = "
                        + paddingArray[i][j]);
    }


5.
// padding the array A with 0 in both row and coloumn
        int paddingArray[][] = new int[A.length+1][A[0].length+1];

        for(int i=0;i<paddingArray.length; i++){
               paddingArray[i][0] = 0;
        }
        for(int j=0;j<paddingArray[0].length; j++){
               paddingArray[0][j] = 0;
        }


6.
   // step1. calculate the prfix sum of submatrix
        int prefixSumMatrix [][] = new int [A.length][A[0].length];
        // 1st row prefix sum
        prefixSumMatrix[0][0] = 0;
        for(int i=0;i<A[0].length;i++){
            prefixSumMatrix[0][i] +=A[0][i];
        }

        // 1st coloumn prefix sum
        for(int j=0;j<A.length;j++){
            prefixSumMatrix[j][0] +=A[j][0];
        }

        // for rest of the element
        for(int i = 1;i<A.length; i++){
            for(int j =1; j<A[0].length ; j++){
                prefixSumMatrix[i][j] = prefixSumMatrix[i-1][j] + prefixSumMatrix[i][j-1] + A[i][j] - prefixSumMatrix[i-1][j-1];
            }
        }

7.
 int[][] arr = {
                 {1, 2, 3, 4, 6},
                 {5, 3, 8, 1, 2},
                 {4, 6, 7, 5, 5},
                 {2, 4, 8, 9, 4}
         };